"""
Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò-—Ç—å—é—Ç–æ—Ä–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠.
"""

import os
import gradio as gr
import tempfile
from PIL import Image
import pytesseract
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
from src.agent.tutor_agent import MathTutorAgent
from src.utils.vector_store import MathProblemVectorStore

class MathTutorApp:
    """
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ò–ò-—Ç—å—é—Ç–æ—Ä–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        self.agent = MathTutorAgent()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.vector_store = MathProblemVectorStore()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–∞–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å)
        problems_json = os.path.join("data", "problems.json")
        if os.path.exists(problems_json):
            self.vector_store.load_problems_from_json(problems_json)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∫–æ–Ω—Ü–µ–ø—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        concepts_json = os.path.join("data", "concepts.json")
        if os.path.exists(concepts_json):
            self.vector_store.load_concepts_from_json(concepts_json)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
    
    def create_interface(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π
        css = """
        .gradio-container {
            font-family: 'Arial', sans-serif;
        }
        .math-tutor-header {
            text-align: center;
            margin-bottom: 1rem;
        }
        .math-tutor-description {
            margin-bottom: 1.5rem;
            text-align: justify;
        }
        .math-tutor-footer {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.8rem;
            color: #666;
        }
        """
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        with gr.Blocks(css=css, title="–ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –¢—å—é—Ç–æ—Ä") as self.interface:
            gr.HTML("""
            <div class="math-tutor-header">
                <h1>üßÆ –ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—å—é—Ç–æ—Ä</h1>
            </div>
            """)
            
            gr.Markdown("""
            <div class="math-tutor-description">
            –≠—Ç–æ—Ç —Ç—å—é—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. 
            –û–Ω –Ω–µ –¥–∞—Å—Ç –≤–∞–º –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∞ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é.
            
            –í—ã –º–æ–∂–µ—Ç–µ:
            - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
            - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å
            </div>
            """)
            
            with gr.Row():
                with gr.Column(scale=7):
                    chatbot = gr.Chatbot(
                        height=500,
                        show_label=False,
                        elem_id="math-tutor-chatbot"
                    )
                    
                    with gr.Row():
                        msg = gr.Textbox(
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞—á—É –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ...",
                            show_label=False,
                            elem_id="math-tutor-input"
                        )
                        submit_btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                    
                    with gr.Row():
                        clear_btn = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
                        hint_btn = gr.Button("–ü–æ–¥—Å–∫–∞–∑–∫–∞")
                
                with gr.Column(scale=3):
                    with gr.Accordion("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π", open=False):
                        image_input = gr.Image(
                            type="pil",
                            label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π"
                        )
                        upload_btn = gr.Button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
                    
                    with gr.Accordion("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—å—é—Ç–æ—Ä–∞", open=False):
                        hint_level = gr.Radio(
                            ["–õ–µ–≥–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–∏–ª—å–Ω–∞—è"],
                            label="–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Å–∫–∞–∑–æ–∫",
                            value="–°—Ä–µ–¥–Ω—è—è"
                        )
                        
                        explanation_level = gr.Radio(
                            ["–ë–∞–∑–æ–≤—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
                            label="–£—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
                            value="–°—Ä–µ–¥–Ω–∏–π"
                        )
                    
                    with gr.Accordion("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ï–ì–≠", open=False):
                        gr.Markdown("""
                        ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
                        
                        - **–ß–∞—Å—Ç—å 1**: 12 –∑–∞–¥–∞–Ω–∏–π —Å –∫—Ä–∞—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º (1 –±–∞–ª–ª –∫–∞–∂–¥–æ–µ)
                        - **–ß–∞—Å—Ç—å 2**: 7 –∑–∞–¥–∞–Ω–∏–π —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º (2-4 –±–∞–ª–ª–∞ –∫–∞–∂–¥–æ–µ)
                        - **–í—Å–µ–≥–æ**: 19 –∑–∞–¥–∞–Ω–∏–π, –º–∞–∫—Å–∏–º—É–º 32 –±–∞–ª–ª–∞
                        
                        ### –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                        
                        - –ê–ª–≥–µ–±—Ä–∞
                        - –ì–µ–æ–º–µ—Ç—Ä–∏—è
                        - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        
                        ### –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        
                        - 3 —á–∞—Å–∞ 55 –º–∏–Ω—É—Ç (235 –º–∏–Ω—É—Ç)
                        """)
            
            gr.HTML("""
            <div class="math-tutor-footer">
                <p>–ò–ò-—Ç—å—é—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ | –°–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LlamaIndex –∏ Gradio</p>
            </div>
            """)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            msg.submit(self.chat, [msg, chatbot], [msg, chatbot])
            submit_btn.click(self.chat, [msg, chatbot], [msg, chatbot])
            clear_btn.click(self.clear_chat, [], [chatbot])
            hint_btn.click(self.get_hint, [chatbot, hint_level], [chatbot])
            upload_btn.click(self.process_image, [image_input, chatbot], [chatbot, image_input])
    
    def chat(self, message, history):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
            
        Returns:
            tuple: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
        """
        if not message:
            return "", history
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        response = self.agent.chat(message)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history.append((message, response))
        
        return "", history
    
    def clear_chat(self):
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.
        
        Returns:
            list: –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞.
        """
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
        self.agent.memory.clear()
        
        return []
    
    def get_hint(self, history, hint_level):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏.
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
            hint_level: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Å–∫–∞–∑–∫–∏.
            
        Returns:
            list: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
        """
        if not history:
            return history
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        current_problem = None
        for i in range(len(history) - 1, -1, -1):
            if "–∑–∞–¥–∞—á–∞" in history[i][0].lower() or "–∑–∞–¥–∞–Ω–∏–µ" in history[i][0].lower():
                current_problem = history[i][0]
                break
        
        if not current_problem:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–µ
            message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞."
            history.append((f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ ({hint_level})", message))
            return history
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        current_progress = ""
        for i in range(len(history) - 1, -1, -1):
            if "—Ä–µ—à–µ–Ω–∏–µ" in history[i][0].lower() or "–º–æ–π –æ—Ç–≤–µ—Ç" in history[i][0].lower():
                current_progress = history[i][0]
                break
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hint_level_map = {
            "–õ–µ–≥–∫–∞—è": "light_hint",
            "–°—Ä–µ–¥–Ω—è—è": "medium_hint",
            "–°–∏–ª—å–Ω–∞—è": "strong_hint"
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hint_request = f"–ú–Ω–µ –Ω—É–∂–Ω–∞ {hint_level.lower()} –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏."
        if current_progress:
            hint_request += f" –í–æ—Ç –º–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_progress}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        response = self.agent.chat(hint_request)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history.append((f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ ({hint_level})", response))
        
        return history
    
    def process_image(self, image, history):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.
        
        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
            
        Returns:
            tuple: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        if image is None:
            return history, None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            image_path = temp_file.name
            image.save(image_path)
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            text = pytesseract.image_to_string(image, lang='rus')
            
            # –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            text = text.strip()
            
            if not text:
                message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç."
                history.append(("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", message))
                return history, None
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append(("–ó–∞–¥–∞—á–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", text))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
            response = self.agent.chat(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∑–∞–¥–∞—á—É –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: {text}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            history.append(("–ó–∞–¥–∞—á–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", response))
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            history.append(("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", message))
        
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(image_path):
                os.remove(image_path)
        
        return history, None
    
    def launch(self, share=False):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        
        Args:
            share: –§–ª–∞–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏.
        """
        self.interface.launch(share=share)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = MathTutorApp()
    app.launch()
